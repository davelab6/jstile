function loadParser() {

Object.prototype['isString'] = function() { var $elf = this; try { ((function () { ; throw new Return(false) }))() } catch (_r) { if (_r instanceof Return) return _r.value;else throw _r } return this }; String.prototype['isString'] = function() { var $elf = this; try { ((function () { ; throw new Return(true) }))() } catch (_r) { if (_r instanceof Return) return _r.value;else throw _r } return this }; JSParser = Parser.delegated(); JSParser['fromTo'] = function() { var $elf = this; var x, y;  return this._or(function() { x = $elf._apply('anything'); y = $elf._apply('anything'); return $elf._or(function() { $elf._applyWithArgs('seq', x); $elf._many(function() { return $elf._or(function() { $elf._not(function() { return $elf._applyWithArgs('seq', y) }); return $elf._apply('char') }) }); return $elf._applyWithArgs('seq', y) }) }) }; JSParser['space'] = function() { var $elf = this;  return this._or(function() { return $elf._or(function() { return Parser._superApplyWithArgs($elf, 'space') }, function() { return $elf._applyWithArgs('fromTo', '//', '\n') }, function() { return $elf._applyWithArgs('fromTo', '/*', '*/') }) }) }; JSParser['nameFirst'] = function() { var $elf = this;  return this._or(function() { return $elf._or(function() { return $elf._apply('letter') }, function() { return $elf._applyWithArgs('exactly', '$') }, function() { return $elf._applyWithArgs('exactly', '_') }) }) }; JSParser['nameRest'] = function() { var $elf = this;  return this._or(function() { return $elf._or(function() { return $elf._apply('letterOrDigit') }, function() { return $elf._applyWithArgs('exactly', '$') }, function() { return $elf._applyWithArgs('exactly', '_') }) }) }; JSParser['iName'] = function() { var $elf = this; var r;  return this._or(function() { return $elf._or(function() { r = $elf._applyWithArgs('firstAndRest', 'nameFirst', 'nameRest'); return (function() { return (r).join('') })() }) }) }; JSParser['name'] = function() { var $elf = this; var n;  return this._or(function() { return $elf._or(function() { n = $elf._apply('iName'); $elf._pred((function() { return (($elf).isKeyword(n)).sendUnaryMessage('not') })()); return (function() { return ['name', n] })() }) }) }; JSParser['keyword'] = function() { var $elf = this; var k;  return this._or(function() { return $elf._or(function() { k = $elf._apply('iName'); $elf._pred((function() { return ($elf).isKeyword(k) })()); return (function() { return [k, k] })() }) }) }; JSParser['number'] = function() { var $elf = this; var ws, fs;  return this._or(function() { return $elf._or(function() { ws = $elf._many1(function() { return $elf._apply('digit') }); fs = $elf._or(function() { $elf._applyWithArgs('exactly', '.'); return $elf._many(function() { return $elf._apply('digit') }) }, function() { $elf._apply('empty'); return (function() { return [''] })() }); return (function() { return ['number', (parseFloat).value(((ws).join('')).sendBinaryMessage(',', '.').sendBinaryMessage(',', ((fs).join(''))))] })() }) }) }; JSParser['escapeChar'] = function() { var $elf = this; var c;  return this._or(function() { return $elf._or(function() { $elf._applyWithArgs('exactly', '\\'); c = $elf._apply('char'); return (function() { return '\\'.sendBinaryMessage(',', c) })() }) }) }; JSParser['str'] = function() { var $elf = this; var cs;  return this._or(function() { return $elf._or(function() { (function() { $elf._applyWithArgs('exactly', '\'');  return '\'' })(); cs = $elf._many(function() { return $elf._or(function() { return $elf._apply('escapeChar') }, function() { $elf._not(function() { return (function() { $elf._applyWithArgs('exactly', '\'');  return '\'' })() }); return $elf._apply('char') }) }); (function() { $elf._applyWithArgs('exactly', '\'');  return '\'' })(); return (function() { return ['string', (cs).join('')] })() }, function() { $elf._applyWithArgs('exactly', '"'); cs = $elf._many(function() { return $elf._or(function() { return $elf._apply('escapeChar') }, function() { $elf._not(function() { return $elf._applyWithArgs('exactly', '"') }); return $elf._apply('char') }) }); $elf._applyWithArgs('exactly', '"'); return (function() { return ['string', (cs).join('')] })() }) }) }; JSParser['special'] = function() { var $elf = this; var s;  return this._or(function() { return $elf._or(function() { s = $elf._or(function() { return (function() { $elf._applyWithArgs('exactly', '(');  return '(' })() }, function() { return (function() { $elf._applyWithArgs('exactly', ')');  return ')' })() }, function() { return (function() { $elf._applyWithArgs('exactly', '{');  return '{' })() }, function() { return (function() { $elf._applyWithArgs('exactly', '}');  return '}' })() }, function() { return (function() { $elf._applyWithArgs('exactly', '[');  return '[' })() }, function() { return (function() { $elf._applyWithArgs('exactly', ']');  return ']' })() }, function() { return (function() { $elf._applyWithArgs('exactly', ',');  return ',' })() }, function() { return (function() { $elf._applyWithArgs('exactly', ';');  return ';' })() }, function() { return (function() { $elf._applyWithArgs('exactly', '?');  return '?' })() }, function() { return (function() { $elf._applyWithArgs('exactly', ':');  return ':' })() }, function() { return (function() { $elf._applyWithArgs('exactly', '!');$elf._applyWithArgs('exactly', '=');$elf._applyWithArgs('exactly', '=');  return '!==' })() }, function() { return (function() { $elf._applyWithArgs('exactly', '!');$elf._applyWithArgs('exactly', '=');  return '!=' })() }, function() { return (function() { $elf._applyWithArgs('exactly', '=');$elf._applyWithArgs('exactly', '=');$elf._applyWithArgs('exactly', '=');  return '===' })() }, function() { return (function() { $elf._applyWithArgs('exactly', '=');$elf._applyWithArgs('exactly', '=');  return '==' })() }, function() { return (function() { $elf._applyWithArgs('exactly', '=');  return '=' })() }, function() { return (function() { $elf._applyWithArgs('exactly', '>');$elf._applyWithArgs('exactly', '=');  return '>=' })() }, function() { return (function() { $elf._applyWithArgs('exactly', '>');  return '>' })() }, function() { return (function() { $elf._applyWithArgs('exactly', '<');$elf._applyWithArgs('exactly', '=');  return '<=' })() }, function() { return (function() { $elf._applyWithArgs('exactly', '<');  return '<' })() }, function() { return (function() { $elf._applyWithArgs('exactly', '+');$elf._applyWithArgs('exactly', '+');  return '++' })() }, function() { return (function() { $elf._applyWithArgs('exactly', '+');$elf._applyWithArgs('exactly', '=');  return '+=' })() }, function() { return (function() { $elf._applyWithArgs('exactly', '+');  return '+' })() }, function() { return (function() { $elf._applyWithArgs('exactly', '-');$elf._applyWithArgs('exactly', '-');  return '--' })() }, function() { return (function() { $elf._applyWithArgs('exactly', '-');$elf._applyWithArgs('exactly', '=');  return '-=' })() }, function() { return (function() { $elf._applyWithArgs('exactly', '-');  return '-' })() }, function() { return (function() { $elf._applyWithArgs('exactly', '*');$elf._applyWithArgs('exactly', '=');  return '*=' })() }, function() { return (function() { $elf._applyWithArgs('exactly', '*');  return '*' })() }, function() { return (function() { $elf._applyWithArgs('exactly', '/');$elf._applyWithArgs('exactly', '=');  return '/=' })() }, function() { return (function() { $elf._applyWithArgs('exactly', '/');  return '/' })() }, function() { return (function() { $elf._applyWithArgs('exactly', '%');$elf._applyWithArgs('exactly', '=');  return '%=' })() }, function() { return (function() { $elf._applyWithArgs('exactly', '%');  return '%' })() }, function() { return (function() { $elf._applyWithArgs('exactly', '&');$elf._applyWithArgs('exactly', '&');$elf._applyWithArgs('exactly', '=');  return '&&=' })() }, function() { return (function() { $elf._applyWithArgs('exactly', '&');$elf._applyWithArgs('exactly', '&');  return '&&' })() }, function() { return (function() { $elf._applyWithArgs('exactly', '|');$elf._applyWithArgs('exactly', '|');$elf._applyWithArgs('exactly', '=');  return '||=' })() }, function() { return (function() { $elf._applyWithArgs('exactly', '|');$elf._applyWithArgs('exactly', '|');  return '||' })() }, function() { return (function() { $elf._applyWithArgs('exactly', '.');  return '.' })() }, function() { return (function() { $elf._applyWithArgs('exactly', '!');  return '!' })() }); return (function() { return [s, s] })() }) }) }; JSParser['tok'] = function() { var $elf = this;  return this._or(function() { return $elf._or(function() { $elf._apply('spaces'); return $elf._or(function() { return $elf._apply('name') }, function() { return $elf._apply('keyword') }, function() { return $elf._apply('number') }, function() { return $elf._apply('str') }, function() { return $elf._apply('special') }) }) }) }; JSParser['toks'] = function() { var $elf = this; var ts;  return this._or(function() { return $elf._or(function() { ts = $elf._many(function() { return $elf._apply('token') }); $elf._apply('spaces'); $elf._apply('end'); return (function() { return ts })() }) }) }; JSParser['token'] = function() { var $elf = this; var tt, t;  return this._or(function() { tt = $elf._apply('anything'); return $elf._or(function() { t = $elf._apply('tok'); $elf._pred((function() { return ((t).at((0))).sendBinaryMessage('=', tt) })()); return (function() { return (t).at((1)) })() }) }) }; JSParser['spacesNoNl'] = function() { var $elf = this;  return this._or(function() { return $elf._or(function() { return $elf._many(function() { return $elf._or(function() { $elf._not(function() { return $elf._applyWithArgs('exactly', '\n') }); return $elf._apply('space') }) }) }) }) }; JSParser['expr'] = function() { var $elf = this; var e, t, f, rhs;  return this._or(function() { return $elf._or(function() { e = $elf._apply('orExpr'); return $elf._or(function() { $elf._applyWithArgs('token', '?'); t = $elf._apply('expr'); $elf._applyWithArgs('token', ':'); f = $elf._apply('expr'); return (function() { return ['condExpr', e, t, f] })() }, function() { $elf._applyWithArgs('token', '='); rhs = $elf._apply('expr'); return (function() { return ['set', e, rhs] })() }, function() { $elf._applyWithArgs('token', '+='); rhs = $elf._apply('expr'); return (function() { return ['mset', e, '+', rhs] })() }, function() { $elf._applyWithArgs('token', '-='); rhs = $elf._apply('expr'); return (function() { return ['mset', e, '-', rhs] })() }, function() { $elf._applyWithArgs('token', '*='); rhs = $elf._apply('expr'); return (function() { return ['mset', e, '*', rhs] })() }, function() { $elf._applyWithArgs('token', '/='); rhs = $elf._apply('expr'); return (function() { return ['mset', e, '/', rhs] })() }, function() { $elf._applyWithArgs('token', '%='); rhs = $elf._apply('expr'); return (function() { return ['mset', e, '%', rhs] })() }, function() { $elf._applyWithArgs('token', '&&='); rhs = $elf._apply('expr'); return (function() { return ['mset', e, '&&', rhs] })() }, function() { $elf._applyWithArgs('token', '||='); rhs = $elf._apply('expr'); return (function() { return ['mset', e, '||', rhs] })() }, function() { $elf._apply('empty'); return (function() { return e })() }) }) }) }; JSParser['orExpr'] = function() { var $elf = this; var x, y;  return this._or(function() { return $elf._or(function() { x = $elf._apply('orExpr'); $elf._applyWithArgs('token', '||'); y = $elf._apply('andExpr'); return (function() { return ['binop', '||', x, y] })() }, function() { return $elf._apply('andExpr') }) }) }; JSParser['andExpr'] = function() { var $elf = this; var x, y;  return this._or(function() { return $elf._or(function() { x = $elf._apply('andExpr'); $elf._applyWithArgs('token', '&&'); y = $elf._apply('eqExpr'); return (function() { return ['binop', '&&', x, y] })() }, function() { return $elf._apply('eqExpr') }) }) }; JSParser['eqExpr'] = function() { var $elf = this; var x, y;  return this._or(function() { return $elf._or(function() { x = $elf._apply('eqExpr'); return $elf._or(function() { $elf._applyWithArgs('token', '=='); y = $elf._apply('relExpr'); return (function() { return ['binop', '==', x, y] })() }, function() { $elf._applyWithArgs('token', '!='); y = $elf._apply('relExpr'); return (function() { return ['binop', '!=', x, y] })() }, function() { $elf._applyWithArgs('token', '==='); y = $elf._apply('relExpr'); return (function() { return ['binop', '===', x, y] })() }, function() { $elf._applyWithArgs('token', '!=='); y = $elf._apply('relExpr'); return (function() { return ['binop', '!==', x, y] })() }) }, function() { return $elf._apply('relExpr') }) }) }; JSParser['relExpr'] = function() { var $elf = this; var x, y;  return this._or(function() { return $elf._or(function() { x = $elf._apply('relExpr'); return $elf._or(function() { $elf._applyWithArgs('token', '>'); y = $elf._apply('addExpr'); return (function() { return ['binop', '>', x, y] })() }, function() { $elf._applyWithArgs('token', '>='); y = $elf._apply('addExpr'); return (function() { return ['binop', '>=', x, y] })() }, function() { $elf._applyWithArgs('token', '<'); y = $elf._apply('addExpr'); return (function() { return ['binop', '<', x, y] })() }, function() { $elf._applyWithArgs('token', '<='); y = $elf._apply('addExpr'); return (function() { return ['binop', '>=', x, y] })() }, function() { $elf._applyWithArgs('token', 'instanceof'); y = $elf._apply('addExpr'); return (function() { return ['binop', 'instanceof', x, y] })() }) }, function() { return $elf._apply('addExpr') }) }) }; JSParser['addExpr'] = function() { var $elf = this; var x, y;  return this._or(function() { return $elf._or(function() { x = $elf._apply('addExpr'); $elf._applyWithArgs('token', '+'); y = $elf._apply('mulExpr'); return (function() { return ['binop', '+', x, y] })() }, function() { x = $elf._apply('addExpr'); $elf._applyWithArgs('token', '-'); y = $elf._apply('mulExpr'); return (function() { return ['binop', '-', x, y] })() }, function() { return $elf._apply('mulExpr') }) }) }; JSParser['mulExpr'] = function() { var $elf = this; var x, y;  return this._or(function() { return $elf._or(function() { x = $elf._apply('mulExpr'); $elf._applyWithArgs('token', '*'); y = $elf._apply('mulExpr'); return (function() { return ['binop', '*', x, y] })() }, function() { x = $elf._apply('mulExpr'); $elf._applyWithArgs('token', '/'); y = $elf._apply('mulExpr'); return (function() { return ['binop', '/', x, y] })() }, function() { x = $elf._apply('mulExpr'); $elf._applyWithArgs('token', '%'); y = $elf._apply('mulExpr'); return (function() { return ['binop', '%', x, y] })() }, function() { return $elf._apply('unary') }) }) }; JSParser['unary'] = function() { var $elf = this; var p;  return this._or(function() { return $elf._or(function() { $elf._applyWithArgs('token', '-'); p = $elf._apply('postfix'); return (function() { return ['unop', '-', p] })() }, function() { $elf._applyWithArgs('token', '+'); p = $elf._apply('postfix'); return (function() { return p })() }, function() { $elf._applyWithArgs('token', '++'); p = $elf._apply('postfix'); return (function() { return ['preop', '++', p] })() }, function() { $elf._applyWithArgs('token', '--'); p = $elf._apply('postfix'); return (function() { return ['preop', '--', p] })() }, function() { $elf._applyWithArgs('token', '!'); p = $elf._apply('postfix'); return (function() { return ['unop', '!', p] })() }, function() { return $elf._apply('postfix') }) }) }; JSParser['postfix'] = function() { var $elf = this; var p;  return this._or(function() { return $elf._or(function() { p = $elf._apply('primExpr'); return $elf._or(function() { $elf._apply('spacesNoNl'); $elf._applyWithArgs('token', '++'); return (function() { return ['postop', '++', p] })() }, function() { $elf._apply('spacesNoNl'); $elf._applyWithArgs('token', '--'); return (function() { return ['postop', '--', p] })() }, function() { $elf._apply('empty'); return (function() { return p })() }) }) }) }; JSParser['primExpr'] = function() { var $elf = this; var p, i, m, as, f;  return this._or(function() { return $elf._or(function() { p = $elf._apply('primExpr'); return $elf._or(function() { $elf._applyWithArgs('token', '['); i = $elf._apply('expr'); $elf._applyWithArgs('token', ']'); return (function() { return ['get', i, p] })() }, function() { $elf._applyWithArgs('token', '.'); m = $elf._applyWithArgs('token', 'name'); $elf._applyWithArgs('token', '('); as = $elf._applyWithArgs('listOf', 'expr', ','); $elf._applyWithArgs('token', ')'); return (function() { return (['send', m, p]).concat(as) })() }, function() { $elf._applyWithArgs('token', '.'); f = $elf._applyWithArgs('token', 'name'); return (function() { return ['get', ['string', f], p] })() }, function() { $elf._applyWithArgs('token', '('); as = $elf._applyWithArgs('listOf', 'expr', ','); $elf._applyWithArgs('token', ')'); return (function() { return (['call', p]).concat(as) })() }) }, function() { return $elf._apply('primExprHd') }) }) }; JSParser['primExprHd'] = function() { var $elf = this; var e, n, s, as, es;  return this._or(function() { return $elf._or(function() { $elf._applyWithArgs('token', '('); e = $elf._apply('expr'); $elf._applyWithArgs('token', ')'); return (function() { return e })() }, function() { $elf._applyWithArgs('token', 'this'); return (function() { return ['this'] })() }, function() { n = $elf._applyWithArgs('token', 'name'); return (function() { return ['get', n] })() }, function() { n = $elf._applyWithArgs('token', 'number'); return (function() { return ['number', n] })() }, function() { s = $elf._applyWithArgs('token', 'string'); return (function() { return ['string', s] })() }, function() { $elf._applyWithArgs('token', 'function'); return $elf._apply('funcRest') }, function() { $elf._applyWithArgs('token', 'new'); n = $elf._applyWithArgs('token', 'name'); $elf._applyWithArgs('token', '('); as = $elf._applyWithArgs('listOf', 'expr', ','); $elf._applyWithArgs('token', ')'); return (function() { return (['new', n]).concat(as) })() }, function() { $elf._applyWithArgs('token', '['); es = $elf._applyWithArgs('listOf', 'expr', ','); $elf._applyWithArgs('token', ']'); return (function() { return (['arr']).concat(es) })() }, function() { return $elf._apply('json') }) }) }; JSParser['json'] = function() { var $elf = this; var bs;  return this._or(function() { return $elf._or(function() { $elf._applyWithArgs('token', '{'); bs = $elf._applyWithArgs('listOf', 'jsonBinding', ','); $elf._applyWithArgs('token', '}'); return (function() { return (['json']).concat(bs) })() }) }) }; JSParser['jsonBinding'] = function() { var $elf = this; var n, v;  return this._or(function() { return $elf._or(function() { n = $elf._apply('jsonPropName'); $elf._applyWithArgs('token', ':'); v = $elf._apply('expr'); return (function() { return ['binding', n, v] })() }) }) }; JSParser['jsonPropName'] = function() { var $elf = this;  return this._or(function() { return $elf._or(function() { return $elf._applyWithArgs('token', 'name') }, function() { return $elf._applyWithArgs('token', 'number') }, function() { return $elf._applyWithArgs('token', 'string') }) }) }; JSParser['formal'] = function() { var $elf = this;  return this._or(function() { return $elf._or(function() { $elf._apply('spaces'); return $elf._applyWithArgs('token', 'name') }) }) }; JSParser['funcRest'] = function() { var $elf = this; var fs, body;  return this._or(function() { return $elf._or(function() { $elf._applyWithArgs('token', '('); fs = $elf._applyWithArgs('listOf', 'formal', ','); $elf._applyWithArgs('token', ')'); $elf._applyWithArgs('token', '{'); body = $elf._apply('srcElems'); $elf._applyWithArgs('token', '}'); return (function() { return ['func', fs, body] })() }) }) }; JSParser['sc'] = function() { var $elf = this;  return this._or(function() { return $elf._or(function() { $elf._apply('spacesNoNl'); return $elf._or(function() { return $elf._applyWithArgs('exactly', '\n') }, function() { return $elf._lookahead(function() { return $elf._applyWithArgs('exactly', '}') }) }, function() { return $elf._apply('end') }) }, function() { return $elf._applyWithArgs('token', ';') }) }) }; JSParser['binding'] = function() { var $elf = this; var n, v;  return this._or(function() { return $elf._or(function() { n = $elf._applyWithArgs('token', 'name'); v = $elf._or(function() { $elf._applyWithArgs('token', '='); return $elf._apply('expr') }, function() { $elf._apply('empty'); return (function() { return ['get', 'undefined'] })() }); return (function() { return ['var', n, v] })() }) }) }; JSParser['block'] = function() { var $elf = this; var ss;  return this._or(function() { return $elf._or(function() { $elf._applyWithArgs('token', '{'); ss = $elf._apply('srcElems'); $elf._applyWithArgs('token', '}'); return (function() { return ss })() }) }) }; JSParser['stmt'] = function() { var $elf = this; var bs, c, t, f, s, i, u, n, v, e, cs;  return this._or(function() { return $elf._or(function() { return $elf._apply('block') }, function() { $elf._applyWithArgs('token', 'var'); bs = $elf._applyWithArgs('listOf', 'binding', ','); $elf._apply('sc'); return (function() { return (['begin']).concat(bs) })() }, function() { $elf._applyWithArgs('token', 'if'); $elf._applyWithArgs('token', '('); c = $elf._apply('expr'); $elf._applyWithArgs('token', ')'); t = $elf._apply('stmt'); f = $elf._or(function() { $elf._applyWithArgs('token', 'else'); return $elf._apply('stmt') }, function() { $elf._apply('empty'); return (function() { return ['get', 'undefined'] })() }); return (function() { return ['if', c, t, f] })() }, function() { $elf._applyWithArgs('token', 'while'); $elf._applyWithArgs('token', '('); c = $elf._apply('expr'); $elf._applyWithArgs('token', ')'); s = $elf._apply('stmt'); return (function() { return ['while', c, s] })() }, function() { $elf._applyWithArgs('token', 'do'); s = $elf._apply('stmt'); $elf._applyWithArgs('token', 'while'); $elf._applyWithArgs('token', '('); c = $elf._apply('expr'); $elf._applyWithArgs('token', ')'); $elf._apply('sc'); return (function() { return ['doWhile', s, c] })() }, function() { $elf._applyWithArgs('token', 'for'); $elf._applyWithArgs('token', '('); i = $elf._or(function() { $elf._applyWithArgs('token', 'var'); return $elf._apply('binding') }, function() { return $elf._apply('expr') }, function() { $elf._apply('empty'); return (function() { return ['get', 'undefined'] })() }); $elf._applyWithArgs('token', ';'); c = $elf._or(function() { return $elf._apply('expr') }, function() { $elf._apply('empty'); return (function() { return ['get', 'true'] })() }); $elf._applyWithArgs('token', ';'); u = $elf._or(function() { return $elf._apply('expr') }, function() { $elf._apply('empty'); return (function() { return ['get', 'undefined'] })() }); $elf._applyWithArgs('token', ')'); s = $elf._apply('stmt'); return (function() { return ['for', i, c, u, s] })() }, function() { $elf._applyWithArgs('token', 'for'); $elf._applyWithArgs('token', '('); v = $elf._or(function() { $elf._applyWithArgs('token', 'var'); n = $elf._applyWithArgs('token', 'name'); return (function() { return ['var', n, ['get', 'undefined']] })() }, function() { return $elf._apply('expr') }); $elf._applyWithArgs('token', 'in'); e = $elf._apply('expr'); $elf._applyWithArgs('token', ')'); s = $elf._apply('stmt'); return (function() { return ['forIn', v, e, s] })() }, function() { $elf._applyWithArgs('token', 'switch'); $elf._applyWithArgs('token', '('); e = $elf._apply('expr'); $elf._applyWithArgs('token', ')'); $elf._applyWithArgs('token', '{'); cs = $elf._many(function() { return $elf._or(function() { $elf._applyWithArgs('token', 'case'); c = $elf._apply('expr'); $elf._applyWithArgs('token', ':'); cs = $elf._apply('srcElems'); return (function() { return ['case', c, cs] })() }, function() { $elf._applyWithArgs('token', 'default'); $elf._applyWithArgs('token', ':'); cs = $elf._apply('srcElems'); return (function() { return ['default', cs] })() }) }); $elf._applyWithArgs('token', '}'); return (function() { return (['switch', e]).concat(cs) })() }, function() { $elf._applyWithArgs('token', 'break'); $elf._apply('sc'); return (function() { return ['break'] })() }, function() { $elf._applyWithArgs('token', 'continue'); $elf._apply('sc'); return (function() { return ['continue'] })() }, function() { $elf._applyWithArgs('token', 'throw'); $elf._apply('spacesNoNl'); e = $elf._apply('expr'); $elf._apply('sc'); return (function() { return ['throw', e] })() }, function() { $elf._applyWithArgs('token', 'try'); t = $elf._apply('block'); $elf._applyWithArgs('token', 'catch'); $elf._applyWithArgs('token', '('); e = $elf._applyWithArgs('token', 'name'); $elf._applyWithArgs('token', ')'); c = $elf._apply('block'); f = $elf._or(function() { $elf._applyWithArgs('token', 'finally'); return $elf._apply('block') }, function() { $elf._apply('empty'); return (function() { return ['get', 'undefined'] })() }); return (function() { return ['try', t, e, c, f] })() }, function() { $elf._applyWithArgs('token', 'return'); e = $elf._or(function() { return $elf._apply('expr') }, function() { $elf._apply('empty'); return (function() { return ['get', 'undefined'] })() }); $elf._apply('sc'); return (function() { return ['return', e] })() }, function() { e = $elf._apply('expr'); $elf._apply('sc'); return (function() { return e })() }) }) }; JSParser['srcElem'] = function() { var $elf = this; var n, f;  return this._or(function() { return $elf._or(function() { $elf._applyWithArgs('token', 'function'); n = $elf._applyWithArgs('token', 'name'); f = $elf._apply('funcRest'); return (function() { return ['var', n, f] })() }, function() { return $elf._apply('stmt') }) }) }; JSParser['srcElems'] = function() { var $elf = this; var ss;  return this._or(function() { return $elf._or(function() { ss = $elf._many(function() { return $elf._apply('srcElem') }); return (function() { return (['begin']).concat(ss) })() }) }) }; JSParser['iParse'] = function() { var $elf = this; var r;  return this._or(function() { return $elf._or(function() { r = $elf._apply('srcElems'); $elf._apply('spaces'); $elf._apply('end'); return (function() { return r })() }) }) }; JSParser; JSParser.prototype = JSParser; ; (JSParser).atput('keywords', Object.sendUnaryMessage('new')); keywords = ['break', 'case', 'catch', 'continue', 'default', 'delete', 'do', 'else', 'finally', 'for', 'function', 'if', 'in', 'instanceof', 'new', 'return', 'switch', 'this', 'throw', 'try', 'typeof', 'var', 'void', 'while', 'with']; (keywords).performwithArguments('do', [(function (k) { return (((JSParser).at('keywords'))).atput(k, true);  })]); JSParser.prototype['isKeyword'] = function(k) { var $elf = this; try { ((function () { ; throw new Return(((($elf).at('keywords'))).hasProperty(k)) }))() } catch (_r) { if (_r instanceof Return) return _r.value;else throw _r } return this }; JSParser.prototype['parse'] = function(aString) { var $elf = this; try { ((function () { ; throw new Return(((function () { return ($elf).matchAllwith(aString, 'iParse');  })).ondo(Fail, (function (f) { return f.sendUnaryMessage('realPos');  }))) }))() } catch (_r) { if (_r instanceof Return) return _r.value;else throw _r } return this }; Translator = OMeta.delegated(); Translator['trans'] = function() { var $elf = this; var t, ans;  return this._or(function() { $elf._form(function() { return $elf._or(function() { t = $elf._apply('anything'); $elf._pred((function() { return ($elf).hasProperty(t) })()); return ans = $elf._applyWithArgs('apply', t) }) }); return (function() { return ans })() }) }; Translator; Translator.prototype = Translator; ; JSTranslator = Translator.delegated(); JSTranslator['curlyTrans'] = function() { var $elf = this; var r, rs;  return this._or(function() { return $elf._or(function() { $elf._form(function() { return $elf._or(function() { $elf._applyWithArgs('exactly', 'begin'); return r = $elf._apply('curlyTrans') }) }); return (function() { return r })() }, function() { $elf._form(function() { return $elf._or(function() { $elf._applyWithArgs('exactly', 'begin'); return rs = $elf._many(function() { return $elf._apply('trans') }) }) }); return (function() { return '{'.sendBinaryMessage(',', ((rs).join(';'))).sendBinaryMessage(',', '}') })() }, function() { r = $elf._apply('trans'); return (function() { return '{'.sendBinaryMessage(',', r).sendBinaryMessage(',', '}') })() }) }) }; JSTranslator['this'] = function() { var $elf = this;  return this._or(function() { return (function() { return 'this' })() }) }; JSTranslator['break'] = function() { var $elf = this;  return this._or(function() { return (function() { return 'break' })() }) }; JSTranslator['continue'] = function() { var $elf = this;  return this._or(function() { return (function() { return 'continue' })() }) }; JSTranslator['number'] = function() { var $elf = this; var n;  return this._or(function() { n = $elf._apply('anything'); return (function() { return ''.sendBinaryMessage(',', n) })() }) }; JSTranslator['string'] = function() { var $elf = this; var s;  return this._or(function() { s = $elf._apply('anything'); return (function() { return s.sendUnaryMessage('printString') })() }) }; JSTranslator['arr'] = function() { var $elf = this; var xs;  return this._or(function() { xs = $elf._many(function() { return $elf._apply('trans') }); return (function() { return '['.sendBinaryMessage(',', ((xs).join(','))).sendBinaryMessage(',', ']') })() }) }; JSTranslator['unop'] = function() { var $elf = this; var op, x;  return this._or(function() { op = $elf._apply('anything'); x = $elf._apply('trans'); return (function() { return '('.sendBinaryMessage(',', op).sendBinaryMessage(',', x).sendBinaryMessage(',', ')') })() }) }; JSTranslator['get'] = function() { var $elf = this; var fd, x;  return this._or(function() { fd = $elf._apply('trans'); x = $elf._apply('trans'); return (function() { return x.sendBinaryMessage(',', '[').sendBinaryMessage(',', fd).sendBinaryMessage(',', ']') })() }, function() { x = $elf._apply('anything'); return (function() { return x })() }) }; JSTranslator['set'] = function() { var $elf = this; var lhs, rhs;  return this._or(function() { lhs = $elf._apply('trans'); rhs = $elf._apply('trans'); return (function() { return lhs.sendBinaryMessage(',', '=').sendBinaryMessage(',', rhs) })() }) }; JSTranslator['mset'] = function() { var $elf = this; var lhs, op, rhs;  return this._or(function() { lhs = $elf._apply('trans'); op = $elf._apply('anything'); rhs = $elf._apply('trans'); return (function() { return lhs.sendBinaryMessage(',', op).sendBinaryMessage(',', '=').sendBinaryMessage(',', rhs) })() }) }; JSTranslator['binop'] = function() { var $elf = this; var op, x, y;  return this._or(function() { op = $elf._apply('anything'); x = $elf._apply('trans'); y = $elf._apply('trans'); return (function() { return '('.sendBinaryMessage(',', x).sendBinaryMessage(',', op).sendBinaryMessage(',', y).sendBinaryMessage(',', ')') })() }) }; JSTranslator['preop'] = function() { var $elf = this; var op, x;  return this._or(function() { op = $elf._apply('anything'); x = $elf._apply('trans'); return (function() { return op.sendBinaryMessage(',', x) })() }) }; JSTranslator['postop'] = function() { var $elf = this; var op, x;  return this._or(function() { op = $elf._apply('anything'); x = $elf._apply('trans'); return (function() { return x.sendBinaryMessage(',', op) })() }) }; JSTranslator['return'] = function() { var $elf = this; var x;  return this._or(function() { x = $elf._apply('trans'); return (function() { return 'return '.sendBinaryMessage(',', x) })() }) }; JSTranslator['if'] = function() { var $elf = this; var cond, t, e;  return this._or(function() { cond = $elf._apply('trans'); t = $elf._apply('curlyTrans'); e = $elf._apply('curlyTrans'); return (function() { return 'if ('.sendBinaryMessage(',', cond).sendBinaryMessage(',', ') ').sendBinaryMessage(',', t).sendBinaryMessage(',', ' else ').sendBinaryMessage(',', e) })() }) }; JSTranslator['condExpr'] = function() { var $elf = this; var cond, t, e;  return this._or(function() { cond = $elf._apply('trans'); t = $elf._apply('trans'); e = $elf._apply('trans'); return (function() { return cond.sendBinaryMessage(',', '?').sendBinaryMessage(',', t).sendBinaryMessage(',', ':').sendBinaryMessage(',', e) })() }) }; JSTranslator['while'] = function() { var $elf = this; var cond, body;  return this._or(function() { cond = $elf._apply('trans'); body = $elf._apply('curlyTrans'); return (function() { return 'while ('.sendBinaryMessage(',', cond).sendBinaryMessage(',', ') ').sendBinaryMessage(',', body) })() }) }; JSTranslator['doWhile'] = function() { var $elf = this; var body, cond;  return this._or(function() { body = $elf._apply('curlyTrans'); cond = $elf._apply('trans'); return (function() { return 'do '.sendBinaryMessage(',', body).sendBinaryMessage(',', ' while (').sendBinaryMessage(',', cond).sendBinaryMessage(',', ')') })() }) }; JSTranslator['for'] = function() { var $elf = this; var init, cond, upd, body;  return this._or(function() { init = $elf._apply('trans'); cond = $elf._apply('trans'); upd = $elf._apply('trans'); body = $elf._apply('curlyTrans'); return (function() { return 'for ('.sendBinaryMessage(',', init).sendBinaryMessage(',', ';').sendBinaryMessage(',', cond).sendBinaryMessage(',', ';').sendBinaryMessage(',', upd).sendBinaryMessage(',', ') ').sendBinaryMessage(',', body) })() }) }; JSTranslator['forIn'] = function() { var $elf = this; var x, arr, body;  return this._or(function() { x = $elf._apply('trans'); arr = $elf._apply('trans'); body = $elf._apply('curlyTrans'); return (function() { return 'for ('.sendBinaryMessage(',', x).sendBinaryMessage(',', ' in ').sendBinaryMessage(',', arr).sendBinaryMessage(',', ') ').sendBinaryMessage(',', body) })() }) }; JSTranslator['begin'] = function() { var $elf = this; var x, xs;  return this._or(function() { x = $elf._apply('trans'); $elf._apply('end'); return (function() { return x })() }, function() { xs = $elf._many(function() { return $elf._apply('trans') }); return (function() { return '{'.sendBinaryMessage(',', ((xs).join(';'))).sendBinaryMessage(',', '}') })() }) }; JSTranslator['func'] = function() { var $elf = this; var args, body;  return this._or(function() { args = $elf._apply('anything'); body = $elf._apply('curlyTrans'); return (function() { return '(function ('.sendBinaryMessage(',', ((args).join(','))).sendBinaryMessage(',', ') ').sendBinaryMessage(',', body).sendBinaryMessage(',', ')') })() }) }; JSTranslator['call'] = function() { var $elf = this; var fn, args;  return this._or(function() { fn = $elf._apply('trans'); args = $elf._many(function() { return $elf._apply('trans') }); return (function() { return fn.sendBinaryMessage(',', '(').sendBinaryMessage(',', ((args).join(','))).sendBinaryMessage(',', ')') })() }) }; JSTranslator['send'] = function() { var $elf = this; var msg, recv, args;  return this._or(function() { msg = $elf._apply('anything'); recv = $elf._apply('trans'); args = $elf._many(function() { return $elf._apply('trans') }); return (function() { return recv.sendBinaryMessage(',', '.').sendBinaryMessage(',', msg).sendBinaryMessage(',', '(').sendBinaryMessage(',', ((args).join(','))).sendBinaryMessage(',', ')') })() }) }; JSTranslator['new'] = function() { var $elf = this; var cls, args;  return this._or(function() { cls = $elf._apply('anything'); args = $elf._many(function() { return $elf._apply('trans') }); return (function() { return 'new '.sendBinaryMessage(',', cls).sendBinaryMessage(',', '(').sendBinaryMessage(',', ((args).join(','))).sendBinaryMessage(',', ')') })() }) }; JSTranslator['var'] = function() { var $elf = this; var name, val;  return this._or(function() { name = $elf._apply('anything'); val = $elf._apply('trans'); return (function() { return 'var '.sendBinaryMessage(',', name).sendBinaryMessage(',', '=').sendBinaryMessage(',', val) })() }) }; JSTranslator['throw'] = function() { var $elf = this; var x;  return this._or(function() { x = $elf._apply('trans'); return (function() { return 'throw '.sendBinaryMessage(',', x) })() }) }; JSTranslator['try'] = function() { var $elf = this; var x, name, c, f;  return this._or(function() { x = $elf._apply('curlyTrans'); name = $elf._apply('anything'); c = $elf._apply('curlyTrans'); f = $elf._apply('curlyTrans'); return (function() { return 'try '.sendBinaryMessage(',', x).sendBinaryMessage(',', ' catch (').sendBinaryMessage(',', name).sendBinaryMessage(',', ') ').sendBinaryMessage(',', c).sendBinaryMessage(',', ' finally ').sendBinaryMessage(',', f) })() }) }; JSTranslator['json'] = function() { var $elf = this; var props;  return this._or(function() { props = $elf._many(function() { return $elf._apply('trans') }); return (function() { return '({'.sendBinaryMessage(',', ((props).join(','))).sendBinaryMessage(',', '})') })() }) }; JSTranslator['binding'] = function() { var $elf = this; var name, val;  return this._or(function() { name = $elf._apply('anything'); val = $elf._apply('trans'); return (function() { return name.sendUnaryMessage('printString').sendBinaryMessage(',', ': ').sendBinaryMessage(',', val) })() }) }; JSTranslator['switch'] = function() { var $elf = this; var x, cases;  return this._or(function() { x = $elf._apply('trans'); cases = $elf._many(function() { return $elf._apply('trans') }); return (function() { return 'switch ('.sendBinaryMessage(',', x).sendBinaryMessage(',', ') {').sendBinaryMessage(',', ((cases).join('; '))).sendBinaryMessage(',', '}') })() }) }; JSTranslator['case'] = function() { var $elf = this; var x, y;  return this._or(function() { x = $elf._apply('trans'); y = $elf._apply('trans'); return (function() { return 'case '.sendBinaryMessage(',', x).sendBinaryMessage(',', ': ').sendBinaryMessage(',', y) })() }) }; JSTranslator; JSTranslator.prototype = JSTranslator; ; input = '1 + 2 3'; ((function () { return (JSParser).parsewith(input, 'iParse');  })).ondo(Fail, (function (f) { return ((input).substring((0), (f.failPos))).sendBinaryMessage(',', ' Parse error ->').sendBinaryMessage(',', ((input).substring((f.failPos))));  })); SpecialTranslator = Translator.delegated(); SpecialTranslator['trans'] = function() { var $elf = this; var x, xs;  return this._or(function() { return $elf._or(function() { x = $elf._apply('anything'); $elf._pred((function() { return x.sendUnaryMessage('isArray').sendUnaryMessage('not') })()); return (function() { return x })() }, function() { return Translator._superApplyWithArgs($elf, 'trans') }, function() { $elf._form(function() { return $elf._or(function() { x = $elf._apply('anything'); return xs = $elf._many(function() { return $elf._apply('trans') }) }) }); return (function() { return (function (_recv) { _recv.addFirst(x); return _recv.sendUnaryMessage('yourself');  })((xs)) })() }) }) }; SpecialTranslator; SpecialTranslator.prototype = SpecialTranslator; ; Object.prototype['isArray'] = function() { var $elf = this; try { ((function () { ; throw new Return(false) }))() } catch (_r) { if (_r instanceof Return) return _r.value;else throw _r } return this }; Array.prototype['isArray'] = function() { var $elf = this; try { ((function () { ; throw new Return(true) }))() } catch (_r) { if (_r instanceof Return) return _r.value;else throw _r } return this }; Array.prototype['includes'] = function(x) { var $elf = this; try { ((function () { ($elf).performwithArguments('do', [(function (y) { return (x.sendBinaryMessage('=', y)).ifTrue((function () { ; throw new Return(true) }));  })]); throw new Return(false) }))() } catch (_r) { if (_r instanceof Return) return _r.value;else throw _r } return this }; LocalFinder = SpecialTranslator.delegated(); LocalFinder['go'] = function() { var $elf = this;  return this._or(function() { return $elf._or(function() { (function() { return ($elf).atput('locals', []) })(); $elf._apply('start'); return (function() { return ($elf.locals) })() }) }) }; LocalFinder['start'] = function() { var $elf = this; var fs;  return this._or(function() { return $elf._or(function() { return $elf._form(function() { return $elf._or(function() { $elf._applyWithArgs('exactly', 'func'); fs = $elf._apply('anything'); return $elf._apply('trans') }) }) }, function() { return $elf._apply('trans') }) }) }; LocalFinder['var'] = function() { var $elf = this; var name, val;  return this._or(function() { name = $elf._apply('anything'); val = $elf._apply('anything'); return (function() { return (((($elf.locals)).includes(name))).ifFalse((function () { return (($elf.locals)).add(name);  })) })() }) }; LocalFinder['func'] = function() { var $elf = this; var fs, b;  return this._or(function() { fs = $elf._apply('anything'); return b = $elf._apply('anything') }) }; LocalFinder; LocalFinder.prototype = LocalFinder; ; ast = (JSParser).matchAllwith('function() { if (foo > bar) { var x, y; } else { var w } return function() { var z } }', 'iParse'); ast = (ast).at((1)); (LocalFinder).matchwith(ast, 'go'); gensym = (function () { var n; n = (0); return (function () { return '$$gensym$$'.sendBinaryMessage(',', (n = n.sendBinaryMessage('+', (1))).sendUnaryMessage('asString'));  });  }).sendUnaryMessage('value'); LocalRenamer = SpecialTranslator.delegated(); LocalRenamer['init'] = function() { var $elf = this; var m, locals;  return this._or(function() { m = $elf._apply('anything'); return $elf._or(function() { locals = $elf._lookahead(function() { return $elf._applyWithArgs('foreign', LocalFinder, 'go') }); (function() { return (function (_recv) { _recv.atput('locals', locals); return _recv.atput('map', m);  })(($elf)) })(); return (function() { return (locals).performwithArguments('do', [(function (l) { return (($elf.map)).atput(l, gensym.sendUnaryMessage('value'));  })]) })() }) }) }; LocalRenamer['go'] = function() { var $elf = this; var m, fs, body;  return this._or(function() { m = $elf._apply('anything'); $elf._applyWithArgs('init', m); return $elf._or(function() { $elf._form(function() { return $elf._or(function() { $elf._applyWithArgs('exactly', 'func'); fs = $elf._apply('anything'); return body = $elf._apply('trans') }) }); return (function() { return ['func', fs, body] })() }, function() { return $elf._apply('trans') }) }) }; LocalRenamer['transName'] = function() { var $elf = this; var n;  return this._or(function() { n = $elf._apply('anything'); return $elf._or(function() { $elf._pred((function() { return (($elf.map)).hasOwnProperty(n) })()); return (function() { return (($elf.map)).at(n) })() }, function() { return (function() { return n })() }) }) }; LocalRenamer['var'] = function() { var $elf = this; var n, v;  return this._or(function() { n = $elf._apply('transName'); v = $elf._apply('trans'); return (function() { return ['var', n, v] })() }) }; LocalRenamer['get'] = function() { var $elf = this; var fd, obj, n;  return this._or(function() { fd = $elf._apply('trans'); obj = $elf._apply('trans'); return (function() { return ['get', fd, obj] })() }, function() { n = $elf._apply('transName'); return (function() { return (n.sendUnaryMessage('isString')).ifTrueifFalse((function () { return ['get', n];  }), (function () { return n;  })) })() }) }; LocalRenamer['func'] = function() { var $elf = this; var fs, b, ls, old;  return this._or(function() { fs = $elf._apply('anything'); b = $elf._apply('anything'); ls = $elf._applyWithArgs('foreign', LocalFinder, 'go', b); old = (function() { return ($elf).newStateWithLocalsfields(ls, fs) })(); b = $elf._applyWithArgs('trans', b); (function() { return (function (_recv) { _recv.atput('locals', ((old).at((0)))); return _recv.atput('map', ((old).at((1))));  })(($elf)) })(); return (function() { return ['func', fs, b] })() }) }; LocalRenamer; LocalRenamer.prototype = LocalRenamer; ; LocalRenamer.prototype['newStateWithLocalsfields'] = function(ls, fs) { var $elf = this; try { ((function () { var old; old = [($elf.locals), ($elf.map)]; (function (_recv) { _recv.atput('locals', []); return _recv.atput('map', Object.sendUnaryMessage('new'));  })(($elf)); (((old).at((0)))).performwithArguments('do', [(function (l) { return (((((ls).includes(l))).or((function () { return (fs).includes(l);  })))).ifFalse((function () { (($elf.map)).atput(l, ((((old).at((1)))).at(l))); return (($elf.locals)).add(l);  }));  })]); throw new Return(old) }))() } catch (_r) { if (_r instanceof Return) return _r.value;else throw _r } return this }; ast = (JSParser).parsewith('function(x, y) { var z; return function(y) { y+z} }', 'iParse'); (LocalRenamer).matchwith(((ast).at((1))), 'go', Object.sendUnaryMessage('new')); MJSParser = JSParser.delegated(); MJSParser['name'] = function() { var $elf = this; var n;  return this._or(function() { return $elf._or(function() { $elf._applyWithArgs('exactly', '@'); n = $elf._apply('iName'); return (function() { return ['mname', n] })() }, function() { return JSParser._superApplyWithArgs($elf, 'name') }) }) }; MJSParser['sc'] = function() { var $elf = this;  return this._or(function() { return $elf._or(function() { $elf._apply('spacesNoNl'); return $elf._lookahead(function() { return $elf._or(function() { return $elf._applyWithArgs('exactly', ')') }, function() { return $elf._applyWithArgs('exactly', ',') }) }) }, function() { return JSParser._superApplyWithArgs($elf, 'sc') }) }) }; MJSParser['primExpr'] = function() { var $elf = this; var n, args;  return this._or(function() { return $elf._or(function() { n = $elf._applyWithArgs('token', 'mname'); $elf._applyWithArgs('token', '('); args = $elf._applyWithArgs('listOf', 'stmt', ','); $elf._applyWithArgs('token', ')'); return (function() { return (['expand', n]).concat(args) })() }, function() { return JSParser._superApplyWithArgs($elf, 'primExpr') }) }) }; MJSParser['topLevel'] = function() { var $elf = this; var n, fs, body;  return this._or(function() { return $elf._or(function() { return $elf._apply('srcElem') }, function() { $elf._applyWithArgs('token', 'macro'); n = $elf._applyWithArgs('token', 'mname'); $elf._applyWithArgs('token', '('); fs = $elf._applyWithArgs('listOf', 'formal', ','); $elf._applyWithArgs('token', ')'); body = $elf._apply('block'); return (function() { (macros).atput(n, ((function (_recv) { _recv.atput('formals', fs); _recv.atput('body', body); return _recv.sendUnaryMessage('yourself');  })((Object.sendUnaryMessage('new'))))); return ['macro', n, fs, body] })() }) }) }; MJSParser['iParse'] = function() { var $elf = this; var t, ts;  return this._or(function() { return $elf._or(function() { t = $elf._apply('topLevel'); $elf._apply('spaces'); $elf._apply('end'); return (function() { return t })() }, function() { ts = $elf._many(function() { return $elf._apply('topLevel') }); $elf._apply('spaces'); $elf._apply('end'); return (function() { return (['begin']).concat(ts) })() }) }) }; MJSParser; MJSParser.prototype = MJSParser; ; (MJSParser).atput('keywords', (JSParser.keywords).sendUnaryMessage('delegated')); ((MJSParser.keywords)).atput('macro', true); macros = Object.sendUnaryMessage('new'); MacroExpander = SpecialTranslator.delegated(); MacroExpander['expand'] = function() { var $elf = this; var n, args, m, r;  return this._or(function() { n = $elf._apply('anything'); args = $elf._many(function() { return $elf._apply('trans') }); m = (function() { return (macros).at(n) })(); r = $elf._applyWithArgs('foreign', LocalRenamer, 'go', (Object.sendUnaryMessage('new')), (m.body)); return $elf._applyWithArgs('foreign', LocalRenamer, 'go', (($elf).mapForFormalsactuals((m.formals), args)), r) }) }; MacroExpander; MacroExpander.prototype = MacroExpander; ; MacroExpander.prototype['mapForFormalsactuals'] = function(fs, as) { var $elf = this; try { ((function () { var m; m = Object.sendUnaryMessage('new'); ((0)).todo(fs.sendUnaryMessage('size').sendBinaryMessage('-', (1)), (function (idx) { return (m).atput(((fs).at(idx)), ((as).at(idx)));  })); throw new Return(m) }))() } catch (_r) { if (_r instanceof Return) return _r.value;else throw _r } return this }; MJSTranslator = JSTranslator.delegated(); MJSTranslator['transWithoutMacros'] = function() { var $elf = this;  return this._or(function() { return $elf._or(function() { (function() { return ($elf).atput('delMacros', true) })(); return $elf._apply('trans') }) }) }; MJSTranslator['macro'] = function() { var $elf = this; var n, fs, body;  return this._or(function() { n = $elf._apply('anything'); fs = $elf._apply('anything'); return $elf._or(function() { $elf._pred((function() { return ($elf.delMacros) })()); body = $elf._apply('anything'); return (function() { return '' })() }, function() { body = $elf._apply('trans'); return (function() { return 'macro @'.sendBinaryMessage(',', n).sendBinaryMessage(',', '(').sendBinaryMessage(',', ((fs).join(','))).sendBinaryMessage(',', '){').sendBinaryMessage(',', body).sendBinaryMessage(',', '}') })() }) }) }; MJSTranslator['expand'] = function() { var $elf = this; var n, args;  return this._or(function() { n = $elf._apply('anything'); args = $elf._many(function() { return $elf._apply('trans') }); return (function() { return '@'.sendBinaryMessage(',', n).sendBinaryMessage(',', '(').sendBinaryMessage(',', ((args).join(','))).sendBinaryMessage(',', ')') })() }) }; MJSTranslator; MJSTranslator.prototype = MJSTranslator; ; (MJSTranslator).atput('delMacros', false); mjsEval = (function (code) { var tmp; tmp = (MJSParser).parsewith(code, 'iParse'); tmp = (MacroExpander).matchwith(tmp, 'trans'); tmp = (MJSTranslator).matchwith(tmp, 'transWithoutMacros'); return (eval).value(tmp);  })

MJSParser.prototype['frontEndParse'] = function(code) {
  try { return this.parsewith(code, "iParse") }
  catch (e) {
    if (e instanceof Fail) {
      e = code.substring(0, e.failPos - 1) + " Parse error ->" + code.substring(e.failPos - 1)
      alert(e)
    }
    throw e
  }
}

}

